//User: Kevin Kern (kjk9cd)
//Lab 6: prelab (9:30 lab time)
//Date: 10/21/2019
//File: hashTable.cpp
#include "hashTable.h"
#include <cstdlib>
#include <iostream>
#include <cmath>
#include <string>
#include <list>
#include <iterator>
#include <array>

using namespace std;

hashTable::hashTable(){
  arr = new list<string>[200003];
  int size = 20;
  for(int i = 0; i< size; i++){
    powersOf[i] = pow(37,i);
  }

  
				
}

hashTable::hashTable(int x){
  arr = new list<string>[x];
  arrSize = x;
  int size = 20;
  for(int i = 0; i< size; i++){
     powersOf[i] = pow(37,i);
  }
}

void hashTable:: hashInsert(string s){
  int index = hashFunc(s);
  arr[index].push_back(s);
}

bool hashTable:: hashFind(string s){
  int index = hashFunc(s);
  for(auto it = arr[index].begin(); it != arr[index].end(); it++){
    if( *it == s){
      return true;
    }
  }
  return false;
}

int hashTable:: hashFunc(string s){
  int size = arrSize;
  unsigned int sum = 0;
  for(int i = 0; i <s.size(); i++){
    sum = sum + (s[i] *  powersOf[i]);
  }

  return (sum % size);
  
				
}
